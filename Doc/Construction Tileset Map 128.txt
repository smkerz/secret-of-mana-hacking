Todo, savoir ce que fait le 82 dans le PRG
Mettre sur un excel avec deux / trois rooms pour mieux analyser


!!! Tileset 16 à 1C

!!!
J'en suis a analyser où sont les tileset 16 dans la WRAM, pour l'instant j'en suis à 19000 !!!!
D0C97 en lecture : 2672 2223 2223, début de donnée de la room6 de la map 128



Breakpoints pour suivre la construction
--
C481 : fonction qui commence la construction
D0C97 en lecture : 6E A2 23 C6 22 E8 86 24 34, début de donnée de la room6 de la map 128
elle finit à CD/11BF
La room est construite à B04C**
Les lignes sont construites à CAA9

Le layer 1 est codé dans la WRAM à A000



Décompression de la map et on la stocke décompressé dans la WRAM à 10000 grâce à la fonction D011





En Bref,

pour voir les tiles qui d'ajoutent une à une : break point sur la ligne WRAM A000


Bien Commenté
-------------

Map 128

La fonction à C4AA remplis complétement le tileset 8x8
Et tout commence à C481 pour la constructio des tiles

Construction des Objets de la map 128 : 0x8AE90 (ci-dessous)

<ingame>
[80: Waterfall Pool]
C8/AE90:	C2 9A 8200 80 41 00 FF
C8/AE98:	10009FBB 27D8 0361
C8/AEA0:	10009E9B 27DB 0000
C8/AEA8:	0A119FBB 17D7 0000

C8/AEB0:	C29A8204 800100FF
C8/AEB8:	000F1625 4000 01C0
C8/AEC0:	000F141A 4000 01C0
C8/AEC8:	000F2115 4000 01C0
</ingame>

Ls données sont chargées dans le CPU ainsi :
9A dans $1B
C2 dans $1C avec la fonction située à C418
ect ...

On considère que l'on à récupérer le header, ici, C2
On entre dans la fonction 01F413

$C2 AND $3F = $2
$2 < = $4
$CCE27E + $4 = $CCE282 (voir ci-dessous)

<ingame>
[Pointers related to the graphics sections above. See subroutine C1/F456]
CC/E27E:	00E3	[00: Kippo, eh?]
CC/E280:	60E3	[01:
CC/E282:	BAE3	[02:
CC/E284:	05E4	[03:
CC/E286:	20E4	[04: Inside Kippo Village houses?]
CC/E288:	41E4	[05:
</ingame>

Ainsi, on récupère dans l'adresse CC/E282 : E3BA
Avec E3BA on a la boucle de la définition du tileset qui se situe ici :

<ingame>
CC/E3BA:	CFC8      	INY 
CC/E3BC:	1FE8C8
			3F24C9    	BIT $C9
CC/E3C2:	1F3FC9
			7F10CB    	BPL $E393
CC/E3C8:	4F55CB
			AF11CA    	ORA ($CA),Y
CC/E3CE:	1F26CA
			1F3ACA      	DEX 
CC/E3D4:	1F000000	ORA $000000,X
CC/E3D8:	3480    	BIT $80,X
CC/E3DA:	0100    	ORA ($00,X)
CC/E3DC:	0000    	BRK #$00
CC/E3DE:	3680    	ROL $80,X
CC/E3E0:	0E0000  	ASL $0000
</ingame>

Cette boucle est utilisée dans la fonction : $01F510:

Le header est CFC8, il est entré dans le registre
Il est rappelé à la fonction 01F49F

Puis à la fonction 01F510, on sort l'adresse de la tile 1 du tileset
A Savoir ; les valeurs des adresses des tiles sont stockées à l'adresse 04 - 05 du CPU
C8CF <<<<< = 19 EO pendant $1F+$1 = (20)h = 32 tiles
C8E8 <<<<< = 1D 00 pendant $3F+$1 = (40)h = 64 tiles
C924 <<<<< = 24 80 pendant $1F+$1 = (20)h = 32 tiles
ect ...

Les tiles sont codées en dures  à l'adresse 0x1D0000
Les première tiles à être appelées pour la map 128 sont situées à
<ingame>
0x1D19E0	49 10 65 60 91 60 EA 01 AC 10 60 80 98 80 59 80
0x1D19F0	FF 00 9F 00 FF 00 FF 40 FF 00 7F 40 7F 00 7F 00
<§ingame>